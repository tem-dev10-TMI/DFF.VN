# 01_payment_gateways — Cổng thanh toán Crypto (Chi tiết cho KB chatbot)

====================================================================
1. PHẠM VI & MỤC ĐÍCH
- Phạm vi: thanh toán on-chain (BTC, ETH, ERC20, TRC20...), stablecoin (USDT, USDC...), cổng custodial (Coinbase Commerce, BitPay...), self-hosted (BTCPay), webhook, refund, xác nhận on-chain, accounting, security, UX.
- Mục đích: chuẩn hóa quy trình, hướng dẫn kỹ thuật, quy tắc xử lý rủi ro, mẫu phản hồi chatbot.

====================================================================
2. GLOSSARY (định nghĩa nhanh)
- Invoice: hóa đơn ghi amount_fiat, amount_crypto, expires_at, address.
- Provider (gateway): dịch vụ trung gian (Coinbase Commerce, BitPay, BTCPay...).
- Custodial: provider giữ private keys.
- Non-custodial / self-hosted: merchant tự giữ keys.
- Confirmations: số block sau khi tx được coi là an toàn.
- Webhook: callback HTTP từ provider báo trạng thái thanh toán.
- Fee / Network fee: phí giao dịch trả cho miners/validators.

====================================================================
3. NHÀ CUNG CẤP PHỔ BIẾN (tóm tắt - pros/cons)
- Coinbase Commerce
  + Ưu: Hỗ trợ nhiều coin, docs tốt, chuyển đổi sang Coinbase fiat dễ.
  + Nhược: Custodial (merchant không giữ key), phí + spread có thể cao.
- BitPay
  + Ưu: Hỗ trợ POS, settlement, KYC/KYB cho doanh nghiệp.
  + Nhược: Yêu cầu compliance, có phí dịch vụ.
- BTCPay Server
  + Ưu: Mã nguồn mở, non-custodial, phí thấp (chỉ network fee), kiểm soát cao.
  + Nhược: Cần vận hành server, backup keys, maintain nodes.
- NOWPayments / CoinPayments
  + Ưu: Hỗ trợ nhiều token, widget dễ tích hợp.
  + Nhược: Kiểm tra spread, bảo mật, và tính lâu dài của provider.
- Lưu ý: cập nhật tính năng & phí của provider theo tài liệu chính thức trước khi quyết định.

====================================================================
4. TIÊU CHÍ LỰA CHỌN (chi tiết)
- Phí & spread: fee dịch vụ + spread giữa giá market và rate provider.
- Hỗ trợ stablecoin & network: USDT (TRC20/ERC20), USDC, BUSD...
- Settlement to fiat: hỗ trợ convert & payout sang tài khoản ngân hàng không?
- KYC / KYB & compliance: provider yêu cầu gì cho merchant?
- Webhook & Idempotency: hỗ trợ HMAC signature, event retry, sandbox.
- Confirmations policy: provider tự xác nhận hay merchant cần verify on-chain?
- Bảo mật & custody: ai giữ private keys? multi-sig? HSM?
- Tài liệu & SDK: PHP/Node/Python sample code, sandbox environment.
- SLA & availability: lịch sử downtime, support quality.
- Chi phí vận hành với self-hosted: server, node, backup, monitoring.

====================================================================
5. LUỒNG THANH TOÁN CHI TIẾT (end-to-end)
1. Khách ở checkout chọn "Thanh toán bằng Crypto".
2. Frontend gửi request tạo invoice tới backend: (order_id, amount_fiat, currency, customer, callback_url).
3. Backend:
   - Lấy rate fiat→crypto (rate_provider),
   - Lấy estimated network fee (fee_oracle),
   - Tính amount_crypto_net = amount_fiat / rate,
   - Tính total_amount_crypto = amount_crypto_net + (who_pays_fee == customer ? fee_est : 0),
   - Tạo invoice record trong DB, gọi provider API (nếu dùng provider) hoặc generate address via HD wallet.
4. Provider/Wallet trả về invoice meta: invoice_id, address, amount_crypto, expires_at, qr_code_url.
5. Frontend hiển thị: amount_fiat, amount_crypto, estimated_network_fee, address (text + copy), QR, countdown expires.
6. Khách gửi tx từ ví.
7. Provider hoặc node detect tx → emit webhook (pending → confirmed → completed).
8. Backend nhận webhook:
   - Xác thực signature,
   - Lưu raw payload,
   - Idempotent xử lý,
   - Verify tx on-chain: tx_id, to_address, amount, token contract, confirmations,
   - Cập nhật crypto_payments.status, cập nhật orders (ví dụ đặt trạng thái "paid"),
   - Gửi notification/email cho khách.
9. Nếu merchant convert to fiat: provider thực hiện settlement → tạo settlement record.

States example: created → pending → confirmed → completed → refunded/failed/expired.

====================================================================
6. THIẾT KẾ CSDL MẪU (MySQL - mở rộng)
-- Bảng lưu invoice/giao dịch crypto
CREATE TABLE crypto_payments (
  id BIGINT AUTO_INCREMENT PRIMARY KEY,
  order_id BIGINT NULL,
  provider VARCHAR(50) NOT NULL,
  invoice_id VARCHAR(128),
  tx_id VARCHAR(128) DEFAULT NULL,
  coin VARCHAR(30), -- e.g. BTC, USDT-TRC20
  address VARCHAR(255),
  amount_fiat DECIMAL(16,2),
  fiat_currency VARCHAR(10),
  price_used DECIMAL(30,12), -- 1 crypto = X fiat at time
  amount_crypto_net DECIMAL(30,18), -- amount corresponding to fiat
  fee_crypto_est DECIMAL(30,18),
  total_amount_crypto DECIMAL(30,18),
  who_pays_fee ENUM('customer','merchant') DEFAULT 'customer',
  fee_currency VARCHAR(10),
  fee_paid_actual DECIMAL(30,18) NULL,
  status ENUM('created','pending','underpaid','confirmed','completed','failed','expired','refunded') DEFAULT 'created',
  confirmations INT DEFAULT 0,
  expires_at DATETIME,
  webhook_payload JSON NULL,
  created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
  updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  UNIQUE KEY uk_provider_invoice (provider, invoice_id)
);

-- Bảng webhook logs cho audit
CREATE TABLE payment_webhook_logs (
  id BIGINT AUTO_INCREMENT PRIMARY KEY,
  provider VARCHAR(50),
  invoice_id VARCHAR(128),
  tx_id VARCHAR(128) NULL,
  payload JSON,
  received_at DATETIME DEFAULT CURRENT_TIMESTAMP
);

-- Bảng settlement (nếu provider chuyển sang fiat)
CREATE TABLE payment_settlements (
  id BIGINT AUTO_INCREMENT PRIMARY KEY,
  crypto_payment_id BIGINT,
  settled_amount DECIMAL(16,2),
  settled_currency VARCHAR(10), -- e.g. VND, USD
  fees DECIMAL(16,2),
  settlement_date DATETIME,
  provider_settlement_id VARCHAR(128),
  created_at DATETIME DEFAULT CURRENT_TIMESTAMP
);

====================================================================
7. WEBHOOK BEST PRACTICES (chi tiết)
- Luôn: lưu raw payload trước khi xử lý.
- Xác thực: dùng HMAC signature so với shared secret (provider gửi header).
- Timestamp + Replay protection: reject nếu timestamp cách server > window (ví dụ 5 phút).
- Idempotency: xử lý dựa trên (provider + invoice_id + tx_id) - skip nếu đã processed.
- Validate: amount_received, token contract address, destination address.
- Logging & retry: nếu xử lý lỗi tạm thời trả 5xx để provider retry; log lỗi.
- Rate limiting: tránh bị spam.
- Response body: trả HTTP 200 nhanh nếu payload hợp lệ; trả 4xx/5xx nếu invalid/need retry.

Sample webhook headers:
X-Signature: sha256=abcd...
X-Timestamp: 1694860000

====================================================================
8. MẪU PAYLOAD (Invoice creation / Webhook)
Invoice create (request -> provider/internal API):
POST /api/payments/create
{
  "order_id": "12345",
  "amount_fiat": 250.00,
  "fiat_currency": "USD",
  "customer": {"email":"khach@domain.com","name":"Nguyen Van A"},
  "callback_url": "https://shop.example.com/webhook/crypto",
  "metadata": {"notes":"order 12345"}
}

Provider response (example):
{
  "provider":"coinbase_commerce",
  "invoice_id":"inv_abc123",
  "address":"0xA1b2C3...",
  "amount_crypto":"0.01234567",
  "crypto_currency":"ETH",
  "expires_at":"2025-09-16T12:34:00Z",
  "qr_code_url":"https://provider/qrcode/inv_abc123.png"
}

Webhook event (example):
POST /webhook/crypto
Headers: X-Signature: sha256=abcd..., X-Timestamp: 1694860000
{
  "event":"invoice.confirmed",
  "provider":"coinbase_commerce",
  "invoice_id":"inv_abc123",
  "tx_id":"0xdeadbeef...",
  "coin":"ETH",
  "amount_crypto":"0.01234567",
  "confirmations":12,
  "fee_paid_native":"0.00123",  -- fee in native coin if provided
  "status":"confirmed"
}

====================================================================
9. MẪU XÁC THỰC SIGNATURE (Pseudo code)
PHP (pseudo):
$raw = file_get_contents('php://input');
$signature = $_SERVER['HTTP_X_SIGNATURE'];
$expected = hash_hmac('sha256', $raw, SHARED_SECRET);
if (!hash_equals($expected, $signature)) { http_response_code(401); exit; }

Node (pseudo):
const raw = await getRawBody(req);
const signature = req.headers['x-signature'];
const expected = crypto.createHmac('sha256', SHARED_SECRET).update(raw).digest('hex');
if (!timingSafeEqual(expected, signature)) return res.status(401).end();

====================================================================
10. XÁC NHẬN ON-CHAIN (policy & khuyến nghị)
- Thực tế xác nhận (mức độ an toàn) phụ thuộc vào coin và giá trị:
  + BTC: 1 confirmation cho giá trị nhỏ (< $500), 3 confirmations cho trung bình, 6 confirmations cho lớn (> $5k).
  + ETH/ERC20: 5–12 confirmations (EVM chains có finality nhanh nhưng vẫn hay dùng 12).
  + TRON/BSC: 1–3 confirmations thường chấp nhận.
- Tùy chỉnh theo tiers:
  Tier A: <$500 → 1 confirmation
  Tier B: $500–$5,000 → 3 confirmations
  Tier C: >$5,000 → 6 confirmations
- Store confirmation policy in config; log confirmation counts.

====================================================================
11. REFUND & DISPUTE (chi tiết)
- Nguyên tắc:
  + Refund phải về cùng chain/token (ví dụ USDT-TRC20 → refund TRC20).
  + Khách cung cấp tx_id gốc; merchant verify on-chain.
  + Nếu refund bằng crypto: merchant thực hiện tx refund, lưu refund tx_id và phí.
  + Nếu refund bằng fiat: provider convert, chi phí & spread áp dụng.
- Quy trình:
  1. Customer gửi yêu cầu refund (form/email) + txid + order info.
  2. Verify tx exists, amount, to_address, confirmations.
  3. Check merchant policy & KYC (nếu > threshold).
  4. Approve/refuse: nếu approve → create refund record → perform refund (multi-sig approval nếu lớn).
  5. Notify customer & update order/payment statuses.
- Fraud prevention:
  + Yêu cầu KYC cho refund lớn.
  + Cross-check shipping/tracking nếu dispute liên quan giao hàng.
  + Log evidence (screenshots, emails, IPs).

====================================================================
12. KẾ TOÁN & RECONCILIATION
- Lưu amount_fiat và amount_crypto tại thời điểm invoice tạo (để audit).
- Settlement table: lưu settled_amount, fees, settlement_date, provider_settlement_id.
- Reconciliation steps:
  + Compare provider settlement reports với payment_settlements.
  + Match txids on-chain với internal payments.
  + Account for provider fees & network fees riêng.
- Gợi ý fields báo cáo: total_volume_by_coin, total_fees_by_provider, pending_settlements.

====================================================================
13. UX / CHECKOUT BEST PRACTICES
- Show clear breakdown: amount_fiat, amount_crypto_net, estimated_network_fee, total_amount_crypto.
- Show network clearly: "USDT (TRC20) — recommended — phí thấp".
- Copyable address + QR + payment URI (e.g. bitcoin:... or ethereum:...).
- Show expiry countdown & explain lý do (để khóa tỷ giá).
- Provide troubleshooting tips: "Nếu giao dịch chưa xác nhận, gửi txid cho chúng tôi".
- Provide fallback: nếu provider down, show "tạm thời không hỗ trợ crypto".

====================================================================
14. SECURITY & OPERATIONAL CONTROLS
- Custody:
  + Nếu self-hosted: multi-sig, hardware wallet, HSM, offline seed backup.
  + Nếu custodial: vet provider, review security & insurance.
- Secrets:
  + Use Vault/KMS for secrets, rotate keys.
- Access:
  + RBAC cho admin UI; require 2FA.
- Monitoring:
  + Watch for sudden wallet drains, unusual withdrawal addresses.
- Incident policies:
  + Cooling period for withdrawals to new addresses.
  + Manual approval for large payouts.

====================================================================
15. MONITORING & ALERTS (metrics)
- Metrics:
  + invoices_created, invoices_expired, invoices_completed, avg_confirm_time, webhook_lag, average_fee_usd_by_chain.
- Alerts:
  + webhook_fail_rate > X%
  + fee_spike > Y% within 10m (e.g. ETH fee > $20)
  + sudden withdrawals to unknown addresses
- ToolsSuggested:
  + Prometheus/Grafana, ELK/Graylog, PagerDuty.

====================================================================
16. TESTING & QA CHECKLIST
- Unit & Integration:
  + create invoice, simulate provider webhook events, idempotency.
- End-to-end:
  + testnet transactions, confirm lifecycle.
- Security testing:
  + XSS/CSRF/WAF testing on checkout; phishing simulation.
- Performance:
  + load test invoice creation & webhook bursts.
- Recovery:
  + restore DB from backup & replay logs.

====================================================================
17. INCIDENT RESPONSE (playbook tóm tắt)
- Ngay lập tức:
  + pause crypto checkout, rotate API keys, take DB snapshot, export logs.
- Điều tra:
  + xem webhook logs, node mempool, wallet balances.
- Liên hệ:
  + provider support, exchange/xử lý blacklist addresses, pháp lý nếu cần.
- Khôi phục:
  + patch vulnerability, rotate secrets, post-mortem & update KB.

====================================================================
18. CANNED RESPONSES (CHATBOT) — chuyên nghiệp & ngắn gọn
- “Shop có nhận USDT không?”
  → “Có. Shop hỗ trợ USDT trên các mạng được liệt kê ở trang thanh toán (Ví dụ: USDT-TRC20, USDT-ERC20). Bạn muốn mình tạo invoice thử để thấy phí và thời gian hiện tại không?”
- “Tôi đã gửi tiền nhưng vẫn Pending.”
  → “Mình kiểm tra giúp. Bạn gửi cho mình `invoice_id` hoặc `tx_id` được không? Hệ thống chờ số confirmations; tùy coin có thể cần 1–12 confirmations.”
- “Phí mạng là bao nhiêu?”
  → “Phí mạng phụ thuộc vào mạng: BTC theo sat/vByte, ETH theo gas (gwei). Mình có thể tạo invoice để hiển thị phí ước tính ngay.”
- “Tôi gửi sai mạng (ví dụ gửi USDT ERC20 vào adres TRC20).”
  → “Rất tiếc — gửi sai mạng thường dẫn đến mất tiền hoặc recovery phức tạp. Gửi cho mình `txid` và thông tin để mình kiểm tra khả năng xử lý, nhưng không đảm bảo có thể hoàn trả.”
- “Làm sao refund?”
  → “Bạn nộp yêu cầu refund tại form / email support, kèm `txid`. Refund sẽ trả về cùng chain/token; phí mạng và biến động giá có thể áp dụng.”

====================================================================
19. RAG / KB INDEXING & TRIGGER (gợi ý cho chatbot)
- Tag nội dung: ["payment","crypto","invoice","webhook","refund","security","confirmations","fee","stablecoin","provider"]
- Key phrases để retrieve: invoice_id, tx_id, confirm, refund policy, network fee, USDT-TRC20, BTCPay, Coinbase Commerce.
- Confidence rule: nếu thông tin về phí/feature provider có thể thay đổi — bot nên offer “kiểm tra tài liệu chính thức” hoặc tạo ticket cho nhân viên.

====================================================================
20. MẪU CÂU HỎI & KỊCH BẢN HỖ TRỢ (cho support)
- Khi user gửi `tx_id`: verify on-chain → nếu confirmed và amount đủ -> update order -> send shipping flow.
- Khi underpaid: notify customer, offer top-up invoice or manual reconciliation.
- Khi suspicious: freeze order, request KYC, escalate.

====================================================================
21. CHECKLIST TRIỂN KHAI (technical)
- [ ] Chọn provider hoặc deploy BTCPay.
- [ ] Thiết kế DB (crypto_payments, webhook_logs, settlements).
- [ ] Implement fee oracle & fiat→crypto rate provider (with fallback).
- [ ] Implement create_invoice API + HMAC signed payloads.
- [ ] Implement webhook handler with signature verification + idempotency.
- [ ] Implement monitoring & alerts.
- [ ] Test on testnet/sandbox, run security scan.
- [ ] Document refund & KYC policy.

====================================================================
22. RỦI RO & KIỂM SOÁT (tóm tắt)
- Biến động giá → dùng stablecoin hoặc lock price & short expiry.
- Sai địa chỉ/QR tamper → sign invoice payloads, show address as text + copy.
- Lừa đảo hoàn tiền → quy trình xác minh, lưu log, yêu cầu KYC.
- Double spend / RBF → policy confirmations, node-based detection.
- Provider downtime → fallback provider or disable crypto payment.

====================================================================
23. LƯU Ý PHÁP LÝ & TUÂN THỦ
- Không phải tư vấn pháp lý: merchant cần tham vấn luật sư & chuyên gia thuế địa phương.
- KYC/AML: nếu merchant convert to fiat hoặc high volume, có thể cần KYC/KYB và báo cáo AML.
- Thuế: ghi nhận doanh thu theo luật địa phương; lưu trữ dữ liệu giao dịch (amount_fiat, amount_crypto, txid).

====================================================================
24. GỢI Ý PHÁT TRIỂN TIẾP THEO (roadmap)
- Thêm multi-chain support & UI selector cho chain.
- Tự động convert & hedge (nếu merchant muốn giữ fiat exposure).
- Integrate Blocknative/Alchemy notify cho reliable webhooks.
- Support Lightning (BTC) cho micropayments.
- Build admin dashboard reconciliation & dispute management.

====================================================================
KẾT LUẬN:
File này cung cấp bộ kiến thức toàn diện để chatbot trả lời chuyên nghiệp mọi câu hỏi liên quan đến cổng thanh toán crypto, đồng thời là checklist kỹ thuật & vận hành cho dev/ops/support. Bạn có thể:
- Tùy chỉnh thresholds (confirmation tiers, fee thresholds).
- Tách thành nhiều file JSON/YAML để loader KB parse tốt hơn.
- Yêu cầu mình xuất file này thành `01_payment_gateways.txt` trong repository (mình có thể tạo file đó cho bạn).

Nếu muốn mình:
- Thêm **mã nguồn mẫu** (PHP/Node) cho create_invoice + webhook verification + on-chain verify, hoặc
- Chia file thành các mục nhỏ JSON/YAML để load bằng RAG,
hãy nói luôn — mình sẽ viết tiếp.
